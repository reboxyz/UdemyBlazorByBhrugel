@page "/product"

@using BlazingShop.Data
@using BlazingShop.Services
@using BlazorInputFile
@using System.IO

@* @inherits OwningComponentBase<ProductService> // Note! Only one 'Service' limitation *@        


@inject ProductService ProductService;                    // Use DI to inject Service which as no limitation to the number of Services
@* @inject WeatherForecastService WeatherForecastService; *@

<AuthorizeView>
    <Authorized Context="Auth">
        @if(products == null /*|| products.Count == 0*/)
        {
            <p><em>Loading or No product exist</em></p>
        } else 
        {
            <div class="container border p-3">
                <div class="row">
                    <div class="col-5">
                        <h3 class="text-info">Product List</h3>
                    </div>
                    <div class="col-3">
                        <button class="btn btn-info form-control" @onclick="AddNewProduct"> 
                            Add New Product
                        </button>

                    </div>
                </div>
                <div class="row pt-4">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Product Name</th>
                                <th>Price</th>
                                <th>Shade Color</th>
                                <th>Category</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td key="@product.Id">@product.Name</td>
                                    <td>@product.Price</td>
                                    <td>@product.ShadeColor</td>
                                    <td>@product.Category.Name</td>
                                    <td>
                                        <button class="btn btn-primary" style="width: 150px" @onclick="(() => EditProduct(product))">
                                            Edit
                                        </button>
                                    </td>
                                </tr>
                            }   
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@if (ShowPopup)
{
<div class="modal" tabindex="-1" style="display:block" role="dialog">
    <EditForm Model="@objProduct"  OnValidSubmit="@ValidSubmit">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="text-info">@(objProduct.Id !=0 ? "Update" : "Create") Product</h3>
                    <button type="button" class="close" @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="col-9">
                            <div class="row py-2">
                                <div class="col-4">
                                    Category Name
                                </div>
                                <div class="col-8">
                                <select @onchange="CategorySelectionChanged" class="form-control">
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id" selected="@(category.Id == objProduct.CategoryId)">@category.Name</option>
                                    }
                                </select>
                                </div>
                            </div>

                            <div class="row py-2">
                                <div class="col-4">
                                    Product Name
                                </div>
                                <div class="col-8">
                                    @*<text class="form-control" type="text" @bind="objProduct.Name" /> Note! Similar code below  *@
                                    <InputText class="form-control" @bind-Value="objProduct.Name" />
                                    <ValidationMessage For="@(() => objProduct.Name)" />
                                </div>
                            </div>

                            <div class="row py-2">
                                <div class="col-4">
                                    Price
                                </div>
                                <div class="col-8">
                                    <input class="form-control" type="text" @bind="objProduct.Price" />
                                    <ValidationMessage For="@(() => objProduct.Price)" />
                                </div>
                            </div>

                            <div class="row py-2">
                                <div class="col-4">
                                    Shade Color
                                </div>
                                <div class="col-8">
                                    <input class="form-control" type="text" @bind="objProduct.ShadeColor" />
                                    <ValidationMessage For="@(() => objProduct.ShadeColor)" />
                                </div>
                            </div>

                            <div class="row py-2">
                                <div class="col-4">
                                    Image
                                </div>
                                <div class="col-8">
                                    <InputFile OnChange="HandleImageSelection" />
                                </div>
                            </div>

                            <div class="row py-2">
                                <div class="offset-4 col">
                                    <button class="btn btn-primary form-control" type="submit">Submit</button>
                                </div>
                                @if (objProduct.Id > 0)
                                {
                                    <div class="col">
                                        <button class="btn btn-danger form-control"
                                                @onclick="DeleteProduct"
                                                type="submit">Delete</button>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-3">
                            <img src="@ConvertImageToDisplay(objProduct.Image)" width="100%" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>
}

@code {
    List<Category> categories;              // For DropDown Values
    List<Product> products;                  
    Product objProduct = new Product();     // Current Product 
    bool ShowPopup = false;
    byte[] ImageUploaded { get; set; }

    // Life-cycle Method
    protected override void OnInitialized()
    {
        products = ProductService.GetProducts();
    } 

    private void AddNewProduct()   
    {
        // Create a new Product
        objProduct = new Product(); 
        categories = ProductService.GetCategoryList();

        // Set the first category as default if there is one
        if (categories.Count > 0)
        {
            objProduct.CategoryId = categories[0].Id;
        } 
        
        objProduct.Id = 0;
        ShowPopup = true;
    }

    private void EditProduct(Product product)   
    {
        objProduct = product;  // Load Product to be displayed
        categories = ProductService.GetCategoryList();

        ShowPopup = true;
    }

    private void ClosePopup()
    {
        ShowPopup = false;
    }

    private void DeleteProduct()
    {
        ShowPopup = false;
        var result = ProductService.DeleteProduct(objProduct);
        products = ProductService.GetProducts(); // Reload Products
    }

    private void ValidSubmit()
    {
        var result = false;
        ShowPopup = false;

        if (ImageUploaded != null)
        {
            objProduct.Image = ImageUploaded;
            ImageUploaded = null;       // clear for next image uploading
        }

        if (objProduct.Id > 0) 
        {
            result = ProductService.UpdateProduct(objProduct); 
        } else 
        {
            result = ProductService.CreateProduct(objProduct); 
        }

        products = ProductService.GetProducts(); // Reload products
    }

    private void CategorySelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            objProduct.CategoryId = id;
        }
    }

    // Convert Uploaded Image to byte[]
    async Task HandleImageSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImageUploaded = ms.ToArray();
        }
    }

    string ConvertImageToDisplay(byte[] image)
    {
        if (image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var finalStr = string.Format("data:image/jpg;base64,{0}", base64);
            return finalStr;
        }
        return "";
    }

}    